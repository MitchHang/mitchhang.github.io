[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/third-and-six/index.html",
    "href": "posts/third-and-six/index.html",
    "title": "Third and Six",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(cfbfastR)\nlibrary(scales)\n\n\n\nload the play-by-play data\n\n\nCode\nplays &lt;- load_cfb_pbp(seasons = c(2019, 2020, 2021, 2022, 2023))\n\n\n\n\nCode\nthird_and_six &lt;- plays |&gt; filter(down == 3, distance == 6)\n\n\n\n\nCode\nthird_and_six_grouped &lt;- third_and_six |&gt;\n  group_by(play_type) |&gt;\n  summarize(count = n()) |&gt;\n  arrange(desc(count))\n\nthird_and_six_grouped\n\n\n# A tibble: 19 × 2\n   play_type                            count\n   &lt;chr&gt;                                &lt;int&gt;\n 1 Pass Reception                        3596\n 2 Pass Incompletion                     2956\n 3 Rush                                  2420\n 4 Penalty                                828\n 5 Timeout                                694\n 6 Sack                                   631\n 7 Passing Touchdown                      392\n 8 Interception Return                    188\n 9 Rushing Touchdown                      102\n10 Fumble Recovery (Opponent)              85\n11 Fumble Recovery (Own)                   56\n12 Interception Return Touchdown           26\n13 Field Goal Good                         13\n14 Field Goal Missed                        4\n15 Fumble Return Touchdown                  3\n16 Punt                                     3\n17 Safety                                   2\n18 Blocked Field Goal                       1\n19 Fumble Recovery (Opponent) Touchdown     1\n\n\nThe most frequent play type is a Pass Reception, with over 3,400 occurrences from 2019 to 2023.\n\n\nCode\nthird_and_six_grouped |&gt;\n  mutate(pct = (count/11655)*100)\n\n\n# A tibble: 19 × 3\n   play_type                            count      pct\n   &lt;chr&gt;                                &lt;int&gt;    &lt;dbl&gt;\n 1 Pass Reception                        3596 30.9    \n 2 Pass Incompletion                     2956 25.4    \n 3 Rush                                  2420 20.8    \n 4 Penalty                                828  7.10   \n 5 Timeout                                694  5.95   \n 6 Sack                                   631  5.41   \n 7 Passing Touchdown                      392  3.36   \n 8 Interception Return                    188  1.61   \n 9 Rushing Touchdown                      102  0.875  \n10 Fumble Recovery (Opponent)              85  0.729  \n11 Fumble Recovery (Own)                   56  0.480  \n12 Interception Return Touchdown           26  0.223  \n13 Field Goal Good                         13  0.112  \n14 Field Goal Missed                        4  0.0343 \n15 Fumble Return Touchdown                  3  0.0257 \n16 Punt                                     3  0.0257 \n17 Safety                                   2  0.0172 \n18 Blocked Field Goal                       1  0.00858\n19 Fumble Recovery (Opponent) Touchdown     1  0.00858\n\n\nWhen I added all occurrences for each type of play, I got 11,655. There were 2,359 rush/run plays from 2019 to 2023, and they accounted for about 20.24% of all types of plays during that same period.\n\n\nCode\nthird_and_six_yards_gained &lt;- third_and_six |&gt;\n  select(play_type, yards_gained) |&gt;\n  group_by(play_type) |&gt;\n  summarize(yards_gained = sum(yards_gained))\n\nthird_and_six_yards_gained\n\n\n# A tibble: 19 × 2\n   play_type                            yards_gained\n   &lt;chr&gt;                                       &lt;dbl&gt;\n 1 Blocked Field Goal                             48\n 2 Field Goal Good                               436\n 3 Field Goal Missed                             202\n 4 Fumble Recovery (Opponent)                    307\n 5 Fumble Recovery (Opponent) Touchdown            0\n 6 Fumble Recovery (Own)                          70\n 7 Fumble Return Touchdown                       141\n 8 Interception Return                           188\n 9 Interception Return Touchdown                 403\n10 Pass Incompletion                             240\n11 Pass Reception                              40481\n12 Passing Touchdown                            8101\n13 Penalty                                       146\n14 Punt                                            0\n15 Rush                                        13713\n16 Rushing Touchdown                            1700\n17 Sack                                        -3965\n18 Safety                                         -5\n19 Timeout                                         0\n\n\nThe total yards gained for rush/run plays from 2019 to 2023 is 13,286 yards, and since there were 2,359 rush/run plays, we get an average of about 5.632 yards gained per play.\n\n\nCode\nthird_and_six_teams_2019 &lt;- third_and_six |&gt;\n  filter(play_type == \"Rush\", year == 2019) |&gt; \n  group_by(home) |&gt;\n  summarize(rush_play_count = n()) |&gt;\n  arrange(desc(rush_play_count))\n\nthird_and_six_teams_2019\n\n\n# A tibble: 125 × 2\n   home             rush_play_count\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Navy                          13\n 2 Georgia Southern              11\n 3 Notre Dame                    10\n 4 Oklahoma State                 8\n 5 Old Dominion                   8\n 6 Pittsburgh                     8\n 7 Florida State                  7\n 8 Nebraska                       7\n 9 Oregon                         7\n10 Toledo                         7\n# ℹ 115 more rows\n\n\n\n\nCode\nthird_and_six_teams_2020 &lt;- third_and_six |&gt;\n  filter(play_type == \"Rush\", year == 2020) |&gt; \n  group_by(home) |&gt;\n  summarize(rush_play_count = n()) |&gt;\n  arrange(desc(rush_play_count))\n\nthird_and_six_teams_2020\n\n\n# A tibble: 103 × 2\n   home             rush_play_count\n   &lt;chr&gt;                      &lt;int&gt;\n 1 NC State                       8\n 2 Navy                           8\n 3 North Texas                    8\n 4 Army                           7\n 5 Tulane                         7\n 6 Air Force                      5\n 7 Auburn                         5\n 8 Georgia Southern               5\n 9 Kansas State                   5\n10 Pittsburgh                     5\n# ℹ 93 more rows\n\n\n\n\nCode\nthird_and_six_teams_2021 &lt;- third_and_six |&gt;\n  filter(play_type == \"Rush\", year == 2021) |&gt; \n  group_by(home) |&gt;\n  summarize(rush_play_count = n()) |&gt;\n  arrange(desc(rush_play_count))\n\nthird_and_six_teams_2021\n\n\n# A tibble: 124 × 2\n   home              rush_play_count\n   &lt;chr&gt;                       &lt;int&gt;\n 1 Arkansas                       13\n 2 Air Force                      11\n 3 Army                            9\n 4 Baylor                          9\n 5 Ole Miss                        9\n 6 Wyoming                         9\n 7 Navy                            8\n 8 Northern Illinois               8\n 9 Tulane                          8\n10 Coastal Carolina                7\n# ℹ 114 more rows\n\n\n\n\nCode\nthird_and_six_teams_2022 &lt;- third_and_six |&gt;\n  filter(play_type == \"Rush\", year == 2022) |&gt; \n  group_by(home) |&gt;\n  summarize(rush_play_count = n()) |&gt;\n  arrange(desc(rush_play_count))\n\nthird_and_six_teams_2022\n\n\n# A tibble: 232 × 2\n   home               rush_play_count\n   &lt;chr&gt;                        &lt;int&gt;\n 1 Florida                          8\n 2 Georgia                          8\n 3 Mercer                           8\n 4 South Dakota State               8\n 5 Alabama State                    7\n 6 Duke                             7\n 7 Navy                             7\n 8 North Carolina                   7\n 9 Towson                           7\n10 Air Force                        6\n# ℹ 222 more rows\n\n\n\n\nCode\nthird_and_six_teams_2023 &lt;- third_and_six |&gt;\n  filter(play_type == \"Rush\", year == 2023) |&gt; \n  group_by(home) |&gt;\n  summarize(rush_play_count = n()) |&gt;\n  arrange(desc(rush_play_count))\n\nthird_and_six_teams_2023\n\n\n# A tibble: 190 × 2\n   home             rush_play_count\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Army                           6\n 2 Louisiana                      6\n 3 Arkansas State                 5\n 4 Connecticut                    5\n 5 Georgia State                  5\n 6 Mercer                         5\n 7 Prairie View                   5\n 8 Tennessee Tech                 5\n 9 Virginia Tech                  5\n10 Western Michigan               5\n# ℹ 180 more rows\n\n\n\n\nCode\nthird_and_six_teams_total &lt;- third_and_six |&gt;\n  filter(play_type == \"Rush\") |&gt; \n  group_by(home) |&gt;\n  summarize(rush_play_count = n()) |&gt;\n  arrange(desc(rush_play_count))\n\nthird_and_six_teams_total\n\n\n# A tibble: 252 × 2\n   home             rush_play_count\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Navy                          40\n 2 Army                          30\n 3 Tulane                        29\n 4 Air Force                     28\n 5 Baylor                        25\n 6 Georgia Southern              23\n 7 Michigan                      23\n 8 Ole Miss                      23\n 9 Bowling Green                 22\n10 Pittsburgh                    22\n# ℹ 242 more rows\n\n\nThe Navy had the most rush/run plays in 2019. There was a three-way tie in 2020 for NC State, the Navy and North Texas. Arkansas had the most rush/run plays in 2021. There was a four-way tie in 2022 for Florida, Georgia, Mercer, and South Dakota State. The Army had the most rush/run plays in 2023. From 2019 to 2023, the Navy had the most rush/run plays out of every team.\n\n\nMaryland\n\n\nCode\nthird_and_six_md_grouped &lt;- third_and_six |&gt;\n  filter(home == \"Maryland\") |&gt; \n  group_by(play_type) |&gt;\n  summarize(count = n()) |&gt;\n  arrange(desc(count))\n\nthird_and_six_md_grouped\n\n\n# A tibble: 10 × 2\n   play_type                  count\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Pass Reception                25\n 2 Rush                          16\n 3 Pass Incompletion             14\n 4 Penalty                        6\n 5 Sack                           4\n 6 Timeout                        3\n 7 Fumble Recovery (Opponent)     1\n 8 Interception Return            1\n 9 Passing Touchdown              1\n10 Rushing Touchdown              1\n\n\n\n\nCode\nthird_and_six_md_grouped |&gt;\n  mutate(pct = (count/72)*100)\n\n\n# A tibble: 10 × 3\n   play_type                  count   pct\n   &lt;chr&gt;                      &lt;int&gt; &lt;dbl&gt;\n 1 Pass Reception                25 34.7 \n 2 Rush                          16 22.2 \n 3 Pass Incompletion             14 19.4 \n 4 Penalty                        6  8.33\n 5 Sack                           4  5.56\n 6 Timeout                        3  4.17\n 7 Fumble Recovery (Opponent)     1  1.39\n 8 Interception Return            1  1.39\n 9 Passing Touchdown              1  1.39\n10 Rushing Touchdown              1  1.39\n\n\nMaryland had ten types of plays from 2019 to 2023, with the most frequent of them being Pass Receptions, accounting for about 34.722% of all plays. This was surprising to me, as this is one of three play types that Maryland seems to be focusing on during football, whereas the other seven listed have less than 10 occurrences from 2019 to 2023. This makes me think that because Maryland focuses on the pass receptions, rushes/runs and pass incompletions, they would often do well in games, but because they aren’t focusing on anything else, they would come up less than stellar in games. So it’s honestly a bit of a mixed bag here.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=third_and_six_md_grouped, \n    aes(x=reorder(play_type, count),\n        weight=count)) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Maryland's dominant play from 2019 to 2023 is pass receptions\", \n    x=\"Type of play\", \n    y=\"Count (from 2019 to 2023\") + \n  theme_minimal() + \n  coord_flip()"
  },
  {
    "objectID": "posts/reverse-engineering/index.html",
    "href": "posts/reverse-engineering/index.html",
    "title": "Reverse Engineering the 538 Article",
    "section": "",
    "text": "This week, I am attempting to reverse-engineer the FiveThirtyEight article, “The Best Red Zone Teams Are The Ones That Get There,” published on September 29, 2022: https://fivethirtyeight.com/features/the-best-red-zone-teams-are-the-ones-that-get-there/\nHere I am loading the necessary packages.\n\n\nCode\nlibrary(tidyverse)\nlibrary(nflreadr)\nlibrary(ggalt)\n\n\nHere I am loading the play-by-play data.\n\n\nCode\nplay_by_play_2022 &lt;- load_pbp(2022)\n\n\nHere is my code confirming that Miami had 20 plays inside the redzone during the first 3 weeks of the season and that the total EPA for those plays was 9.0.\n\n\nCode\nqualified_plays &lt;- c(\"pass\", \"run\", \"punt\", \"kickoff\", \"field_goal\")\n\n\n\n\nCode\nplay_by_play_2022_p1 &lt;- play_by_play_2022 |&gt;\n  filter(week &lt;= 3, yardline_100 &lt;= 20) |&gt;\n  filter(play_type %in% qualified_plays) |&gt;\n  filter(posteam == \"MIA\") |&gt;\n  drop_na(yardline_100) |&gt;\n  group_by(posteam) |&gt;\n  summarize(\n    redzone_plays = n(),\n    epa = sum(epa)\n  )\n\nplay_by_play_2022_p1\n\n\n# A tibble: 1 × 3\n  posteam redzone_plays   epa\n  &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt;\n1 MIA                20  9.00\n\n\nHere I am calculating Miami’s overall EPA for redzone plays during the 2022 season. We can see that Miami has scored over 140 plays within the redzone, and it has resulted in an overall EPA score of 12.3, a slight increase (about 36.6%) from the first three weeks.\n\n\nCode\nplay_by_play_2022_p2 &lt;- play_by_play_2022 |&gt;\n  filter(yardline_100 &lt;= 20) |&gt;\n  filter(play_type %in% qualified_plays) |&gt;\n  filter(posteam == \"MIA\") |&gt;\n  drop_na(yardline_100) |&gt;\n  group_by(posteam) |&gt;\n  summarize(\n    redzone_plays = n(),\n    epa = sum(epa)\n  )\n\nplay_by_play_2022_p2\n\n\n# A tibble: 1 × 3\n  posteam redzone_plays   epa\n  &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt;\n1 MIA               147  12.3\n\n\nHere I am creating two separate dataframes for all NFL teams in 2022 with the total number of redzone plays and total EPA for both the first 3 weeks and through 8 weeks, all before joining them into one greater dataframe.\n\n\nCode\nplay_by_play_2022_3weeks &lt;- play_by_play_2022 |&gt;\n  filter(week &lt;= 3, yardline_100 &lt;= 20) |&gt;\n  filter(play_type %in% qualified_plays) |&gt;\n  drop_na(yardline_100) |&gt;\n  group_by(posteam) |&gt;\n  summarize(\n    redzone_plays_3weeks = n(),\n    epa_3weeks = sum(epa)\n  )\n\nplay_by_play_2022_8weeks &lt;- play_by_play_2022 |&gt;\n  filter(week &lt;= 8, yardline_100 &lt;= 20) |&gt;\n  filter(play_type %in% qualified_plays) |&gt;\n  drop_na(yardline_100) |&gt;\n  group_by(posteam) |&gt;\n  summarize(\n    redzone_plays_8weeks = n(),\n    epa_8weeks = sum(epa)\n  )\n\n\nplay_by_play_2022_3_and_8weeks &lt;- play_by_play_2022_3weeks |&gt; left_join(play_by_play_2022_8weeks)\n\n\nJoining with `by = join_by(posteam)`\n\n\nHere I am creaing a dumbbell plot showing the change in EPA for the major football teams, with the green dots representing Week 3 EPA and the blue dots representing Week 8 EPA. We can see that\nAlthough the Kansas City Chiefs had the highest EPA after eight weeks, the team with the greatest overall change in EPA from three to eight weeks is the Minnesota Vikings, as there is a 229% increase from the Week 3 EPA to the Week 8 EPA (one value was in the negative while the other was in the positive). In addition, despite the Denver Broncos having the lowest EPA after eight week, the team with the worst overall change in EPA during the same period is the Jacksonville Jaguars, as there is a 524.2% decrease from the Week 3 EPA to the Week 8 EPA. If we check on the Miami Dolphins, we see that despite there not being much of a change between the EPA values for Week 3 and Week 8 compared to the other teams, the values are relatively high. It’s possible that the Miami Dolphins are consistent in their efforts of plays from Weeks 3 and 8, whereas the Minnesota Vikings were pushing a lot harder in their plays. Meanwhile, the Jacksonville Jaguars likely couldn’t boost their effort in plays (or at least keep it as consistent as possible) from Weeks 3 and 8, as other teams have often outsmarted and outplayed them during their games.\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=play_by_play_2022_3_and_8weeks, \n    aes(y=reorder(posteam, epa_8weeks), x=epa_3weeks, xend=epa_8weeks),\n    linewidth = 1,\n    size=1,\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"blue\") + \n  theme_minimal() + \n  labs(title=\"Minnesota bears highest EPA leap after 8 weeks\", subtitle=\"Despite the Kansas City chiefs having the highest number of expected points added (EPA) after eight weeks \\nof in-season games, the Minnesota Vikings have the greatest overall increase in its EPA, with a 229% \\nincrease from Week 3 to Week 8 (green = Week 3 EPA, blue = Week 8 EPA).\", caption=\"Source: NFL | By Mitchell Hang\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nWarning in geom_dumbbell(data = play_by_play_2022_3_and_8weeks, aes(y =\nreorder(posteam, : Ignoring unknown parameters: `linewidth`\n\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead."
  },
  {
    "objectID": "posts/maryland-football-ypp/index.html",
    "href": "posts/maryland-football-ypp/index.html",
    "title": "Maryland’s Big Ten performance growing lackluster since 2021",
    "section": "",
    "text": "Here I am loading the necessary functions.\n\n\nCode\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(ggrepel)\n\n\nHere I am loading the football logs.\n\n\nCode\nlogs &lt;- read_csv(\"https://thescoop.org/sports-data-files/footballlogs1123.csv\")\n\n\nRows: 19934 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHere I am counting the total number of wins per team.\n\n\nCode\nwinlosslogs &lt;- logs |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\n\nHere I am calculating the Total Offensive and Defensive Plays, Total Offensive and Defensive Yards, Total Wins, and Offensive and Defensive Yards Per Play.\n\n\nCode\nwinlosslogs |&gt; \n  group_by(Team, Season) |&gt; \n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins)) |&gt; \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -&gt; ypp\n\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\nHere I am plotting the points showing Offensive and Defensive Yards Per Play for each team between the 2011 and 2023 seasons.\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, aes(x=OffensiveYPP, y=DefensiveYPP)\n    )\n\n\n\n\n\nHere I am making the size of the points based on Total Wins.\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins)\n    )\n\n\n\n\n\nHere I am making the points more transluscent and adding a scale showing the number of wins.\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins),\n    alpha = .3) + \n  scale_size(range = c(3, 8), name=\"Wins\")\n\n\n\n\n\nHere I am filtering for the team of Maryland and highlighting their points in red.\n\n\nCode\nmaryland &lt;- ypp |&gt; filter(Team == \"Maryland\")\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=maryland, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\")\n\n\n\n\n\nHere I am calculating the X and Y intercepts of the graph.\n\n\nCode\nypp |&gt; \n  ungroup() |&gt; \n  summarise(\n    offense = mean(OffensiveYPP), \n    defense = mean(DefensiveYPP)\n    )\n\n\n# A tibble: 1 × 2\n  offense defense\n    &lt;dbl&gt;   &lt;dbl&gt;\n1    5.73    5.61\n\n\nHere I am putting lines on the graph with the X and Y-intercept information.\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=maryland, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.734061) + \n  geom_hline(yintercept = 5.608837)\n\n\n\n\n\nHere I am adding labels for points representing the team of Maryland for each season.\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=maryland, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.734061) + \n  geom_hline(yintercept = 5.608837) +\n  geom_text_repel(\n    data=maryland, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Season)\n  )\n\n\n\n\n\nHere I am adding a lede title and description to the graph.\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=maryland, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.734061) + \n  geom_hline(yintercept = 5.608837) + \n  geom_text_repel(\n    data=maryland, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Season)\n  ) +\n  labs(title=\"Maryland's Big Ten performance growing lackluster since 2021\", subtitle=\"The Terps offense and defense for the past few years are considerably lower, especially when ranked with \\nother teams from 2011 to 2023.\", caption=\"Source: NCAA | By Mitchell Hang\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\nI think this is an interesting depiction on how Maryland’s Big Ten performance has changed over the years, because I was initially expecting some increase, but in actuality it’s often gone below the X-axis in recent years (i.e., after the start of the COVID-19 pandemic). It can be considered that 2021 was their best year since their Defensive and Offensive Yards per Play were above and to the right of their respective axes – they are in the so-called positive-positive quadrant (I) – whereas 2022 appears to be the worst in recent years as they are in the negative-negative quadrant (III). I don’t think there’s an easy way to signify that the 2023 data is incomplete, as we already have tons of data from other teams that have already blended in with one another, but maybe making the point for 2023 a darker color could be a potential solution."
  },
  {
    "objectID": "posts/big-ten-plays/index.html",
    "href": "posts/big-ten-plays/index.html",
    "title": "Purdue dethroned in average offensive plays for 2023 NCAA football season",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(scales)\n\n\nHere I am loading the library items that will help me construct my code for this exercise.\n\n\nCode\nlogs_22 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs22.csv\")\n\nlogs_23 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\n\nHere I am loading the two online datasets for 2022 and 2023 separately into RStudio.\n\n\nCode\nbig10 &lt;- c(\"Nebraska Cornhuskers\", \"Iowa Hawkeyes\", \"Minnesota Golden Gophers\", \"Illinois Fighting Illini\", \"Northwestern Wildcats\", \"Wisconsin Badgers\", \"Indiana Hoosiers\", \"Purdue Boilermakers\", \"Ohio State Buckeyes\", \"Michigan Wolverines\", \"Michigan State Spartans\", \"Penn State Nittany Lions\", \"Rutgers Scarlet Knights\", \"Maryland Terrapins\")\n\n\nThis code block constructs a filter category of all the Big Ten colleges to be used in the 2022 and 2023 datasets. Alternatively, one could filter the datasets directly by conference.\n\n\nCode\nlogs_22_filtered &lt;- logs_22 |&gt; \n  filter(TeamFull %in% big10) |&gt;\n  select(TeamFull, OffensivePlays) |&gt;\n  group_by(TeamFull) |&gt;\n  summarise(\n    TotalOffensivePlays = sum(OffensivePlays),\n    GamesPlayed = n(),\n    AvgOffensivePlaysPerGame = (TotalOffensivePlays/GamesPlayed)) |&gt;\n  arrange(desc(AvgOffensivePlaysPerGame))\n\nshow(logs_22_filtered)\n\n\n# A tibble: 14 × 4\n   TeamFull               TotalOffensivePlays GamesPlayed AvgOffensivePlaysPer…¹\n   &lt;chr&gt;                                &lt;dbl&gt;       &lt;int&gt;                  &lt;dbl&gt;\n 1 Purdue Boilermakers                   1049          14                   74.9\n 2 Northwestern Wildcats                  886          12                   73.8\n 3 Indiana Hoosiers                       879          12                   73.2\n 4 Illinois Fighting Ill…                 938          13                   72.2\n 5 Maryland Terrapins                     915          13                   70.4\n 6 Penn State Nittany Li…                 911          13                   70.1\n 7 Michigan Wolverines                    970          14                   69.3\n 8 Ohio State Buckeyes                    876          13                   67.4\n 9 Minnesota Golden Goph…                 862          13                   66.3\n10 Michigan State Sparta…                 773          12                   64.4\n11 Wisconsin Badgers                      827          13                   63.6\n12 Rutgers Scarlet Knigh…                 762          12                   63.5\n13 Nebraska Cornhuskers                   761          12                   63.4\n14 Iowa Hawkeyes                          772          13                   59.4\n# ℹ abbreviated name: ¹​AvgOffensivePlaysPerGame\n\n\nHere, I am mutating the 2022 dataset to show the results I would like. I begin by implementing the Big Ten filter category, selecting only the columns showing the full team name and the number of offensive plays for each game, and grouping by the full team name. Then, I use the summarise/ze function to create new columns showing the total number of offensive plays for each team, the number of games each team played during the season, and the calculated average number of offensive plays per game for each team. I then arranged the teams in descending order by the latter column, and we can see that the Purdue Boilermakers have a wide lead for their total offensive plays, thereby resulting them having the highest average offensive plays per game during the 2022 season, as there is about one play separating the Boilermakers and the Northwestern Wildcats and half a play separating the Wildcats and the Indiana Hoosiers. I would say that these team results are relatively close to one another.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=logs_22_filtered, \n    aes(x=reorder(TeamFull, AvgOffensivePlaysPerGame),\n        weight=AvgOffensivePlaysPerGame)) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Purdue out on top in average offensive plays for 2022\", \n    x=\"Team\", \n    y=\"Average # of offensive plays per game\") + \n  theme_minimal() + \n  coord_flip()\n\n\n\n\n\nHere, I am constructing a stacked bar graph that shows the average number of offensive plays for each team in the Big Ten Conference for the 2022 college football season. I decided to go with a stacked bar graph because the names of the teams are quite long and they would cross into one another otherwise, and also because it will be easier to see any differences from one team to another rather than a regular (i.e., vertical) bar graph.\nThis graph, we can see that Purdue has the highest average number of offensive plays for all Big Ten colleges during the 2022 college football season. There are relatively small margins from one team to another on this graph, with the largest separation being between the Nebraska Cornhuskers and the Iowa Hawkeyes. Some teams have played for fewer games compared to Purdue (they have played the most, at 14 games) during the 2022 season, and it’s possible that the ranking would’ve changed had they played more games.\n\n\nCode\nlogs_23_filtered &lt;- logs_23 |&gt; \n  filter(TeamFull %in% big10) |&gt;\n  select(TeamFull, OffensivePlays) |&gt;\n  group_by(TeamFull) |&gt;\n  summarise(\n    TotalOffensivePlays = sum(OffensivePlays),\n    GamesPlayed = n(),\n    AvgOffensivePlaysPerGame = (TotalOffensivePlays/GamesPlayed)) |&gt;\n  arrange(desc(AvgOffensivePlaysPerGame))\n\nshow(logs_23_filtered)\n\n\n# A tibble: 14 × 4\n   TeamFull               TotalOffensivePlays GamesPlayed AvgOffensivePlaysPer…¹\n   &lt;chr&gt;                                &lt;dbl&gt;       &lt;int&gt;                  &lt;dbl&gt;\n 1 Penn State Nittany Li…                 403           5                   80.6\n 2 Purdue Boilermakers                    438           6                   73  \n 3 Wisconsin Badgers                      357           5                   71.4\n 4 Maryland Terrapins                     410           6                   68.3\n 5 Michigan State Sparta…                 338           5                   67.6\n 6 Illinois Fighting Ill…                 400           6                   66.7\n 7 Northwestern Wildcats                  399           6                   66.5\n 8 Indiana Hoosiers                       332           5                   66.4\n 9 Minnesota Golden Goph…                 382           6                   63.7\n10 Ohio State Buckeyes                    314           5                   62.8\n11 Rutgers Scarlet Knigh…                 373           6                   62.2\n12 Nebraska Cornhuskers                   372           6                   62  \n13 Michigan Wolverines                    358           6                   59.7\n14 Iowa Hawkeyes                          333           6                   55.5\n# ℹ abbreviated name: ¹​AvgOffensivePlaysPerGame\n\n\nHere, I am doing the exact same steps I used to mutate the 2022 dataset for the current 2023 dataset. Here, we can see that the Penn State Nittany Lions have overtaken the Purdue Boilermakers in average offensive plays per game in the 2023 season by about six plays. The Wisconsin Badgers have moved up considerably from last year’s ranking, as they are currently now behind Purdue by no more than two plays.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=logs_23_filtered, \n    aes(x=reorder(TeamFull, AvgOffensivePlaysPerGame),\n        weight=AvgOffensivePlaysPerGame)) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Penn State overtakes Purdue in average offensive plays for 2023\", \n    x=\"Team\", \n    y=\"Average # of offensive plays per game\") + \n  theme_minimal() + \n  coord_flip()\n\n\n\n\n\nHere, we see that the Penn Stake Nittany Lions have currently dethroned the Purdue Boilermakers for having the highest average offensive plays for all Big Ten colleges in the 2023 college football season, and it’s evident from the graph that there’s a much wider margin between the top two teams compared to the top 2 and top 3 teams, top 3 and top 4 teams, etc. It can be assumed that Penn State was pushing more offensive plays in their games since being ranked sixth in average offensive plays from last year. Interestingly, if we go back to the tibble from earlier, Penn State has played five games whereas Purdue has played six, and Purdue has a few dozen more offensive plays than Penn State. It’s possible that the separation between the current top two teams in average offensive plays wil grow larger once Penn State completes their sixth game.\nIn conclusion, I thought this was an interesting exercise in creating bar graphs to tell a story about a certain college’s rise or fall in the sports world. I was honestly surprised to see Purdue lose their lead in average offensive plays for another team, considering how dominant they were in having the highest offensive plays during the 2022 college football season. Considering that the 2023 college football season is still in progress, it’s unknown if the ranking will remain as is or if Purdue (or another team) takes back their lead, and maybe another team will make a surprising move up or down from last year’s ranking."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sportsblog",
    "section": "",
    "text": "What Defines a Kevin Willard Team?\n\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2023\n\n\nMitchell Hang\n\n\n\n\n\n\n  \n\n\n\n\nMaryland’s Rushing Performance is Running On Empty\n\n\n\n\n\n\n\n\n\n\n\n\nNov 7, 2023\n\n\nMitchell Hang\n\n\n\n\n\n\n  \n\n\n\n\nReverse Engineering the 538 Article\n\n\n\n\n\n\n\n\n\n\n\n\nOct 31, 2023\n\n\nMitchell Hang\n\n\n\n\n\n\n  \n\n\n\n\nThree UMD players have the highest aces per match\n\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2023\n\n\nMitchell Hang\n\n\n\n\n\n\n  \n\n\n\n\nMaryland’s Big Ten performance growing lackluster since 2021\n\n\n\n\n\n\n\n\n\n\n\n\nOct 25, 2023\n\n\nMitchell Hang\n\n\n\n\n\n\n  \n\n\n\n\nThird and Six\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2023\n\n\nMitchell Hang\n\n\n\n\n\n\n  \n\n\n\n\nPurdue dethroned in average offensive plays for 2023 NCAA football season\n\n\n\n\n\n\n\n\n\n\n\n\nOct 10, 2023\n\n\nMitchell Hang\n\n\n\n\n\n\n  \n\n\n\n\nHello World!\n\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\nMitchell Hang\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 2, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hello-world/index.html",
    "href": "posts/hello-world/index.html",
    "title": "Hello World!",
    "section": "",
    "text": "This is a blog. The word “blog” rhymes with “dog.”\nWelcome to my blog, dog."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/running-on-empty/index.html",
    "href": "posts/running-on-empty/index.html",
    "title": "Maryland’s Rushing Performance is Running On Empty",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n\n\nCode\nlogs &lt;- read_csv(\"https://www.thescoop.org/sports-data-files/footballlogs23.csv\")\n\n\nRows: 1205 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nlogs_big10 &lt;- logs |&gt;\n  filter(Conference == \"Big Ten Conference\")\n\n\n\n\nCode\nggplot() + \n  geom_line(data=logs_big10, aes(x=Date, y=RushingAvg, group=Team)) + \n  scale_y_continuous(limits = c(-5, 10))\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_line(data=logs_big10, aes(x=Date, y=RushingAvg, group=Team)) + \n  scale_y_continuous(limits = c(-5, 10)) +\n  facet_wrap(~Team)\n\n\n\n\n\n\n\nCode\nlogs_big10 |&gt; summarise(mean(RushingAvg))\n\n\n# A tibble: 1 × 1\n  `mean(RushingAvg)`\n               &lt;dbl&gt;\n1               3.82\n\n\n\n\nCode\nggplot() + \n  geom_hline(yintercept=3.816667, color=\"blue\") + \n  geom_line(data=logs_big10, aes(x=Date, y=RushingAvg, group=Team)) + \n  scale_y_continuous(limits = c(-5, 10)) +\n  facet_wrap(~Team)\n\n\n\n\n\nAfter a brief winning streak at the start of the 2023 college football season, Maryland is slowly starting to grow unsteady and falter in regards to its rushing performance in games.\nOne key determinant of a football team’s overall trajectory heading later into the season is by analyzing and comparing their rushing performances over time, based on a calculated mean of RushingAvg (measured at yards per carry) to serve as a baseline. Ideally, a mark above the baseline would indicate an above average rushing performance whereas a mark below the baseline would be below average. If we take a look at Maryland’s graph of overall rushing performance over the past few months of games, we can see that for the first five games of the 2023 season (September 2nd to September 30th) that Maryland’s has an above average rushing performance compared to a baseline of 3.816667 yards per carry. Starting from Game 6 (October 7th), we start to see a slight decline in rushing performance before returning to some level slightly above the baseline. However, the most recent game on November 4th reveals Maryland’s worst rushing performance thus far in the season, as it is way below the baseline (less than -3 yards per carry). Interestingly enough, the first five games with the above average rushing performances were those in which Maryland won, whereas they lost in the following four games.\nWhen we compare Maryland’s rushing performance to other Big Ten teams during the same period, we can see that many of the other teams have different fluctuating (i.e., change from high to low) rushing performances in regards to the baseline, but Michigan seems to be the most consistent, as there is relatively little fluctuation and their first few games are rated above the baseline. The one graph that looks most similar to Maryland’s is Nebraska’s, as they both have above average rushing performances for games up to October 1st, followed by a slight decline before returning above the baseline, followed by another decline in rushing performance. It’s worth noting that Nebraska’s most recent rushing performance isn’t as bad as Maryland’s around the same time. However, the fact that Maryland’s most recent rushing performance falls far below not just the baseline but other teams in their recent games draws immediate concern, as it makes people wonder how they are doing so poorly in rushing, especially compared to their past performances in prior seasons.\nIf we analyze Maryland’s performance in the most recent game against Penn State alone, we can see that not only was their rushing performance below average, but also they had the fewest rushing attempts out of all games they played thus far (16). From this, it’s also worth noting that Maryland and Penn State games are often some of the most hyped within the universities, as the two have a growing football rivalry (largely helped by them currently being part of the same conference) going as far back as at least 1943, where both teams face up once a year in the fall, and Penn State wins most often. In fact, Penn State’s own sports website even chronicles many of their matches with Maryland in detail, mentioning that their longest winning streak lasted 24 games from 1962 to 1988, with the only times Maryland has won being in 1961, 2014 and 2020 (plus a tie in 1988). So it seems that Maryland losing to Penn State almost every year is perhaps a constant in life (something that might be presumed as inevitable despite the increased training), but once in a while, a miracle does happen and Maryland is able to pull out a victory (or at least tie).\nhttps://gopsusports.com/sports/football/opponent-history/university-of-maryland/44"
  },
  {
    "objectID": "posts/volleyball-aces/index.html",
    "href": "posts/volleyball-aces/index.html",
    "title": "Volleyball",
    "section": "",
    "text": "Here I am loading the necessary functions.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\nset.seed(1234)\n\n\nHere I am loading the football logs.\n\n\nCode\nplayers &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_playerstats_2023.csv\")\n\n\nRows: 5133 Columns: 33\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (7): team, full_name, roster_name, last_name, first_name, yr, pos\ndbl (24): season, jersey, feet, inches, gp, gs, mp, s, kills, errors, total_...\nlgl  (2): ms, total_blocks\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nactiveplayers &lt;- players |&gt; \n  filter(mp&gt;=20) |&gt;\n  filter(!is.na(aces), !is.na(pos))\n\nactiveplayers &lt;- activeplayers |&gt; mutate(acespermatch=(aces/mp))\n\n\n\n\nCode\nsummary(activeplayers$acespermatch)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.1818  0.6000  0.6143  0.9500  2.4000 \n\n\n\n\nCode\naceplayers &lt;- activeplayers |&gt; filter(acespermatch &gt;= 0.9500)\n\nggplot() + geom_beeswarm(data=aceplayers, aes(x=pos, y=acespermatch), color=\"grey\")\n\n\n\n\n\n\n\nCode\numd &lt;- activeplayers |&gt; \n  filter(team == \"Maryland Terrapins, Terps\") |&gt; \n  filter(acespermatch &gt;= 0.9500) |&gt; \n  arrange(desc(acespermatch))\n\nggplot() + \n  geom_beeswarm(\n    data=aceplayers, \n    groupOnX=TRUE, \n    aes(x=pos, y=acespermatch), color=\"grey\") + \n  geom_beeswarm(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=pos, y=acespermatch), color=\"red\")\n\n\nWarning: The `groupOnX` argument of `geom_beeswarm()` is deprecated as of ggbeeswarm\n0.7.1.\nℹ ggplot2 now handles this case automatically.\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_beeswarm(\n    data=aceplayers, \n    groupOnX=TRUE, \n    aes(x=pos, y=acespermatch), color=\"grey\") + \n  geom_beeswarm(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=pos, y=acespermatch), color=\"red\") +\n  geom_text_repel(\n    data=umd, \n    aes(x=pos, y=acespermatch, label=full_name)) +\n  labs(title=\"Three UMD players have the highest aces per match\", subtitle=\"The Terps' women's volleyball team currently has three players that have a calculated average of 0.95 or more \\naces for every match they played, as they are ranked alongside many other players in other teams serving \\ndifferent positions.\", caption=\"Source: NCAA | By Mitchell Hang\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\nLilly Gunter, a defensive specialist, has recently racked up 26 digs, a season-high, against Illinois (10/20). Sam Csire, an outside hitter, secured double-double with 12 kills and career-high 17 digs against Illinois (10/20) and was honored at the beginning of the semester as a member of the Maryland 1,000-Kill Club. Erin Engel, a setter, recently produced a pair of service aces in win over Iowa (10/21)."
  },
  {
    "objectID": "posts/kevin-willard/index.html",
    "href": "posts/kevin-willard/index.html",
    "title": "What Defines a Kevin Willard Team?",
    "section": "",
    "text": "Here I am loading the required functions and logs.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggalt)\n\n\n\n\nCode\nncaa_logs &lt;- read_csv(\"https://thescoop.org/sports-data-files/cbblogs1524.csv\")\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 98113 Columns: 50\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): Season, TeamFull, Opponent, HomeAway, W_L, URL, Conference, Team\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\nlgl   (2): Blank, season\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n=====\nHere I am creating separate databases which tally the games won by Seton Hall and Maryland, as well as grouping them by season.\n\n\nCode\nseton_hall_games &lt;- ncaa_logs |&gt;\n  filter(TeamFull == \"Seton Hall Pirates\") |&gt;\n  mutate(\n    win = case_when(\n      grepl(\"W\", W_L) ~ 1, \n      grepl(\"L\", W_L) ~ 0),\n    loss = case_when(\n      grepl(\"W\", W_L) ~ 0, \n      grepl(\"L\", W_L) ~ 1)\n  )\n\nmaryland_games &lt;- ncaa_logs |&gt;\n  filter(TeamFull == \"Maryland Terrapins\") |&gt;\n  mutate(\n    win = case_when(\n      grepl(\"W\", W_L) ~ 1, \n      grepl(\"L\", W_L) ~ 0),\n    loss = case_when(\n      grepl(\"W\", W_L) ~ 0, \n      grepl(\"L\", W_L) ~ 1)\n  )\n\n\n\n\nCode\nseton_hall_games_wins &lt;- seton_hall_games |&gt;\n  group_by(Season) |&gt; \n  summarise(\n    wins = sum(win),\n    losses = sum(loss)\n    ) |&gt; na.omit()\n\nmaryland_games_wins &lt;- maryland_games |&gt;\n  group_by(Season) |&gt; \n  summarise(\n    wins = sum(win),\n    losses = sum(loss)\n    ) |&gt; na.omit()\n\n\n=====\nHere I am creating graphs that show the wins and losses by Seton Hall and Maryland from each season (keeping in mind that 2023-2024 is still in progress), as to give a brief idea of the teams’ overall standing.\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=seton_hall_games_wins, \n    aes(y=Season, x=wins, xend=losses),\n    linewidth = 1,\n    size=1,\n    color = \"grey\",\n    colour_x = \"blue\",\n    colour_xend = \"orange\") + \n  theme_minimal() + \n  labs(title=\"Seton Hall's first post-Willard season similar to before\", subtitle=\"When Shaheen Holloway became the new Seton Hall's men's basketball coach for the 2022-2023 season, \\ntheir overall performance during that season was far cry from before in terms of the difference between \\ngames won and lost, and it was most similar to Kevin Willard's coaching season in 2014-2015 (blue = \\ngames won, orange = games lost).\", caption=\"Source: NCAA | By Mitchell Hang\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nWarning in geom_dumbbell(data = seton_hall_games_wins, aes(y = Season, x =\nwins, : Ignoring unknown parameters: `linewidth`\n\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\nSeton Hall’s most recent season performance after Kevin Willard left proved to be somewhat troubling, as the number of losses started catching up to the number of wins, especially compared to most seasons (including the prior one) where wins had a growing distance over losses. In fact, the performance seemed most identical to some of Willard’s earlier coaching seasons, particulalry 2014-2015 and 2020-2021 (although the latter could be excused as that was when people were returning to play and witness games during the COVID-19 pandemic).\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=maryland_games_wins, \n    aes(y=Season, x=wins, xend=losses),\n    linewidth = 1,\n    size=1,\n    color = \"grey\",\n    colour_x = \"blue\",\n    colour_xend = \"orange\") + \n  theme_minimal() + \n  labs(title=\"Maryland gets a shakeup in 2022-2023 with new coach\", subtitle=\"When Kevin Willard became the new Maryland men's basketball coach for the 2022-2023 season, he \\nhelped to bring the team back to its bases, as they had won more than 20 games and extended their \\nloss-win gap, compared to when they had more losses than wins in the prior season (blue = games won, \\norange = games lost).\", caption=\"Source: NCAA | By Mitchell Hang\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nWarning in geom_dumbbell(data = maryland_games_wins, aes(y = Season, x = wins,\n: Ignoring unknown parameters: `linewidth`\n\n\n\n\n\nHere, we can see that Maryland starts to have a reversal after the 2021-2022 season, as Willard managed to produce a performance with more wins than losses, and a relatively wide loss-win gap. Excluding 2023-2024, Maryland only had one season in which they had more losses than wins over the past few years, whereas Seton Hall had at leas three, showing that Willard can easily slip into continuing a team’s consistent performance.\n=====\nHere I am calculating Z-scores as an overall metric of Seton Hall and Maryland’s team performances over the past few seasons.\n\n\nCode\nseton_hall_games_stats &lt;- seton_hall_games |&gt;\n  group_by(Season) |&gt; \n  summarise(\n    avgTeamFG = mean(TeamFG),\n    avgTeam3P = mean(Team3P),\n    avgTeamFT = mean(TeamFT),\n    avgOpponentFG = mean(OpponentFG),\n    avgOpponent3P = mean(Opponent3P),\n    avgOpponentFT = mean(OpponentFT),\n    ) |&gt; na.omit() \n\nseton_hall_games_stats_zscore &lt;- seton_hall_games_stats |&gt;\n  mutate(\n    TeamFGZscore = as.numeric(scale(avgTeamFG, center = TRUE, scale = TRUE)),\n    Team3PZscore = as.numeric(scale(avgTeam3P, center = TRUE, scale = TRUE)),\n    TeamFTZscore = as.numeric(scale(avgTeamFT, center = TRUE, scale = TRUE)),\n    OpponentFGZscore = as.numeric(scale(avgOpponentFG, center = TRUE, scale = TRUE)) * -1,\n    Opponent3PZscore = as.numeric(scale(avgOpponent3P, center = TRUE, scale = TRUE)) * -1,\n    OpponentFTZscore = as.numeric(scale(avgOpponentFT, center = TRUE, scale = TRUE)) * -1,\n    TotalZscore = TeamFGZscore + Team3PZscore + TeamFTZscore + OpponentFGZscore + Opponent3PZscore + OpponentFTZscore\n  )\n\nseton_hall_games_stats_zscore |&gt; arrange(desc(TotalZscore))\n\n\n# A tibble: 10 × 14\n   Season    avgTeamFG avgTeam3P avgTeamFT avgOpponentFG avgOpponent3P\n   &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n 1 2023-2024      26.5      5.5       19            19.5          6.5 \n 2 2021-2022      25.9      7.34      15.0          24            6.28\n 3 2019-2020      26.1      7.93      14.6          23.9          6.57\n 4 2017-2018      28.6      7.35      15.0          26.6          7.71\n 5 2015-2016      26.2      6.06      15.6          23.9          6.24\n 6 2022-2023      23.8      5.76      15.1          23.1          6.52\n 7 2020-2021      24.9      6.67      14.7          25.2          7.33\n 8 2014-2015      23.7      6.87      14.1          24.3          5.39\n 9 2016-2017      26.4      6.12      14.3          24.6          6.48\n10 2018-2019      26.1      7.06      14.5          24.9          7.94\n# ℹ 8 more variables: avgOpponentFT &lt;dbl&gt;, TeamFGZscore &lt;dbl&gt;,\n#   Team3PZscore &lt;dbl&gt;, TeamFTZscore &lt;dbl&gt;, OpponentFGZscore &lt;dbl&gt;,\n#   Opponent3PZscore &lt;dbl&gt;, OpponentFTZscore &lt;dbl&gt;, TotalZscore &lt;dbl&gt;\n\n\nDuring his time coaching at Seton Hall, Kevin Willard managed to drum up a consistent performance for his team in terms of overall field goals, three-pointers and free throws, leading to a relative improvement as each season passes. His last season in 2021-2022 proved to be his most formidable, and if we take a look at Seton Hall’s first season without Willard (2022-2023), we can see that the performance was much lesser than before, in regards to field goals, three pointers and free throws made. In fact, their performance was much closer to 2020-2021, as people were beginning to get back into sports amidst the COVID-19 pandemic. In addition, Seton Hall’s first three games of the 2023-2024 season show signs of them growing much stronger than before.\n\n\nCode\nmaryland_games_stats &lt;- maryland_games |&gt;\n  group_by(Season) |&gt; \n  summarise(\n    avgTeamFG = mean(TeamFG),\n    avgTeam3P = mean(Team3P),\n    avgTeamFT = mean(TeamFT),\n    avgOpponentFG = mean(OpponentFG),\n    avgOpponent3P = mean(Opponent3P),\n    avgOpponentFT = mean(OpponentFT),\n    ) |&gt; na.omit() \n\nmaryland_games_stats_zscore &lt;- maryland_games_stats |&gt;\n  mutate(\n    TeamFGZscore = as.numeric(scale(avgTeamFG, center = TRUE, scale = TRUE)),\n    Team3PZscore = as.numeric(scale(avgTeam3P, center = TRUE, scale = TRUE)),\n    TeamFTZscore = as.numeric(scale(avgTeamFT, center = TRUE, scale = TRUE)),\n    OpponentFGZscore = as.numeric(scale(avgOpponentFG, center = TRUE, scale = TRUE)) * -1,\n    Opponent3PZscore = as.numeric(scale(avgOpponent3P, center = TRUE, scale = TRUE)) * -1,\n    OpponentFTZscore = as.numeric(scale(avgOpponentFT, center = TRUE, scale = TRUE)) * -1,\n    TotalZscore = TeamFGZscore + Team3PZscore + TeamFTZscore + OpponentFGZscore + Opponent3PZscore + OpponentFTZscore\n  )\n\nmaryland_games_stats_zscore |&gt; arrange(desc(TotalZscore))\n\n\n# A tibble: 9 × 14\n  Season avgTeamFG avgTeam3P avgTeamFT avgOpponentFG avgOpponent3P avgOpponentFT\n  &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n1 2015-…      26.2      7.42      15.9          24.3          6.67          11.4\n2 2019-…      24        7.68      16.1          23.6          7.32          10  \n3 2016-…      25.1      8.24      15.5          24.2          6.42          13.3\n4 2017-…      25.3      7.16      15.2          24.4          7.62          10.4\n5 2022-…      24.6      6.66      13.8          23.3          5.63          11.3\n6 2018-…      25.2      7.26      13.7          23.4          7.41          11.4\n7 2020-…      24.3      8.16      12.1          23.5          8.26          10.3\n8 2023-…      22        4.67      15.3          21.3          3.67          14.7\n9 2021-…      24.7      6.84      14.7          25.8          8.23          10.8\n# ℹ 7 more variables: TeamFGZscore &lt;dbl&gt;, Team3PZscore &lt;dbl&gt;,\n#   TeamFTZscore &lt;dbl&gt;, OpponentFGZscore &lt;dbl&gt;, Opponent3PZscore &lt;dbl&gt;,\n#   OpponentFTZscore &lt;dbl&gt;, TotalZscore &lt;dbl&gt;\n\n\nMaryland’s first season under Willard (2022-2023) proved to be relatively normal/neutral, as it fell more in line with their performances from 2017-2018 and 2018-2019. Prior to that, the 2015-2016 season was Maryland’s best performance thus far, with the team slowly experiencing a downturn with each coming season. However, Maryland’s first three games of the 2023-2024 season are shown to be worse than initially expected, as it has gotten as low as their performance in the 2021-2022 season, right before Willard became the coach, so it’s worth looking out for any signs of improvement as the current season progresses.\nBrendan Balsamo wrote in his article for The Setonian titled “The Seton Hall Legacy of Kevin Willard,” in which he said, “Under Willard, the program transformed from the butt of a Big East-wide joke, to a perennial conference title contender and a recurring player in March Madness.” From our analysis, it’s clear to see that Willard has already been made a welcome member of Maryland after years of bringing Seton Hall to stardom, but the current season does not hint at any good signs of a more consistent performance, and only time will tell if this season’s performance will be just as good as the last one, and perhaps many others before."
  }
]